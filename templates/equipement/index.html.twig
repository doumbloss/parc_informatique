{# templates/equipement/index.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Gestion des Équipements - UGANC{% endblock %}

{% block page_title %}
    <div class="d-flex align-items-center">
        <i class="bi bi-cpu me-2 text-primary"></i>
        Gestion des Équipements
        <span class="badge bg-primary ms-2">{{ equipements|length }}</span>
    </div>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --success-gradient: linear-gradient(135deg, #48bb78 0%, #38a169 100%);
            --warning-gradient: linear-gradient(135deg, #ed8936 0%, #dd6b20 100%);
            --danger-gradient: linear-gradient(135deg, #f56565 0%, #e53e3e 100%);
        }

        .page-header {
            background: var(--primary-gradient);
            color: white;
            padding: 2rem 0;
            margin-bottom: 2rem;
            border-radius: 15px;
            position: relative;
            overflow: hidden;
        }

        .page-header::before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            width: 200px;
            height: 200px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            transform: translate(50px, -50px);
        }

        .stats-cards {
            margin-top: -50px;
            position: relative;
            z-index: 10;
        }

        .stat-card {
            background: white;
            border-radius: 15px;
            padding: 1.5rem;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            border-left: 4px solid transparent;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: var(--primary-gradient);
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0,0,0,0.15);
        }

        .stat-card.success::before { background: var(--success-gradient); }
        .stat-card.warning::before { background: var(--warning-gradient); }
        .stat-card.danger::before { background: var(--danger-gradient); }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .stat-label {
            color: #6c757d;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .filters-section {
            background: white;
            border-radius: 15px;
            padding: 2rem;
            box-shadow: 0 4px 15px rgba(0,0,0,0.08);
            margin-bottom: 2rem;
        }

        .search-input {
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            padding: 0.75rem 1rem;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .search-input:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            outline: none;
        }

        .btn-modern {
            border-radius: 12px;
            padding: 0.75rem 1.5rem;
            font-weight: 500;
            border: none;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .btn-modern::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
            transition: left 0.5s;
        }

        .btn-modern:hover::before {
            left: 100%;
        }

        .btn-primary-modern {
            background: var(--primary-gradient);
            color: white;
        }

        .btn-success-modern {
            background: var(--success-gradient);
            color: white;
        }

        .equipments-table {
            background: white;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(0,0,0,0.08);
        }

        .table-header {
            background: var(--primary-gradient);
            color: white;
            padding: 1.5rem;
        }

        .table thead th {
            background: #f8f9fa;
            border: none;
            padding: 1rem 0.75rem;
            font-weight: 600;
            color: #495057;
            white-space: nowrap;
            position: sticky;
            top: 0;
            z-index: 5;
        }

        .table tbody tr {
            transition: all 0.3s ease;
            border: none;
        }

        .table tbody tr:hover {
            background: #f8f9fa;
            transform: scale(1.001);
        }

        .table tbody td {
            padding: 1rem 0.75rem;
            border-color: #f1f3f4;
            vertical-align: middle;
        }

        .status-badge {
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
            text-transform: capitalize;
        }

        .status-fonctionnel {
            background: #d4edda;
            color: #155724;
        }

        .status-en-panne {
            background: #f8d7da;
            color: #721c24;
        }

        .status-maintenance {
            background: #fff3cd;
            color: #856404;
        }

        .status-obsolete {
            background: #e2e3e5;
            color: #383d41;
        }

        .action-buttons {
            display: flex;
            gap: 0.5rem;
            justify-content: center;
        }

        .btn-action {
            width: 35px;
            height: 35px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            border: none;
            transition: all 0.3s ease;
            font-size: 0.9rem;
        }

        .btn-view {
            background: #e3f2fd;
            color: #1976d2;
        }

        .btn-edit {
            background: #fff3e0;
            color: #f57c00;
        }

        .btn-delete {
            background: #ffebee;
            color: #d32f2f;
        }

        .btn-action:hover {
            transform: scale(1.1);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }

        .empty-state {
            text-align: center;
            padding: 4rem 2rem;
            color: #6c757d;
        }

        .empty-state i {
            font-size: 4rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }

        .pagination-modern {
            justify-content: center;
            margin-top: 2rem;
        }

        .pagination-modern .page-link {
            border: none;
            border-radius: 8px;
            margin: 0 0.25rem;
            padding: 0.75rem 1rem;
            color: #667eea;
            transition: all 0.3s ease;
        }

        .pagination-modern .page-link:hover {
            background: var(--primary-gradient);
            color: white;
            transform: translateY(-2px);
        }

        .filter-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .filter-tag {
            background: #e3f2fd;
            color: #1976d2;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.85rem;
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        .filter-tag .remove {
            cursor: pointer;
            font-weight: bold;
        }

        .view-toggle {
            display: flex;
            background: #f8f9fa;
            border-radius: 8px;
            padding: 0.25rem;
        }

        .view-toggle button {
            background: none;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            transition: all 0.3s ease;
        }

        .view-toggle button.active {
            background: white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .grid-view {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
        }

        .equipment-card {
            background: white;
            border-radius: 15px;
            padding: 1.5rem;
            box-shadow: 0 4px 15px rgba(0,0,0,0.08);
            transition: all 0.3s ease;
            border-left: 4px solid #667eea;
        }

        .equipment-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }

        .equipment-header {
            display: flex;
            justify-content: space-between;
            align-items: start;
            margin-bottom: 1rem;
        }

        .equipment-name {
            font-weight: 600;
            font-size: 1.1rem;
            color: #2d3748;
        }

        .equipment-details {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 0.5rem;
            font-size: 0.9rem;
            color: #6c757d;
        }

        @media (max-width: 768px) {
            .stats-cards {
                margin-top: 1rem;
            }

            .filters-section {
                padding: 1rem;
            }

            .table-responsive {
                border-radius: 15px;
            }

            .grid-view {
                grid-template-columns: 1fr;
            }
        }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.9);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }

        .loading-overlay.show {
            opacity: 1;
            visibility: visible;
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
{% endblock %}

{% block body %}
<!-- Loading Overlay -->
<div class="loading-overlay" id="loadingOverlay">
    <div class="spinner"></div>
</div>

<!-- Page Header -->
<div class="page-header">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-lg-8">
                <h1 class="mb-3">
                    <i class="bi bi-cpu me-3"></i>
                    Gestion des Équipements
                </h1>
                <p class="lead mb-0">
                    Gérez efficacement votre parc informatique avec notre interface moderne
                </p>
            </div>
            <div class="col-lg-4 text-end">
                <a href="{{ path('app_equipement_new') }}" class="btn btn-light btn-lg btn-modern">
                    <i class="bi bi-plus-circle me-2"></i>
                    Nouvel Équipement
                </a>
            </div>
        </div>
    </div>
</div>

<!-- Statistics Cards -->
<div class="container">
    <div class="stats-cards">
        <div class="row g-4">
            <div class="col-lg-3 col-md-6">
                <div class="stat-card">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <div class="stat-number text-primary">{{ equipements|length }}</div>
                            <div class="stat-label">Total Équipements</div>
                        </div>
                        <i class="bi bi-laptop text-primary" style="font-size: 2rem; opacity: 0.3;"></i>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="stat-card success">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            {% set fonctionnels = equipements|filter(e => e.etat|lower == 'fonctionnel')|length %}
                            <div class="stat-number text-success">{{ fonctionnels }}</div>
                            <div class="stat-label">Fonctionnels</div>
                        </div>
                        <i class="bi bi-check-circle text-success" style="font-size: 2rem; opacity: 0.3;"></i>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="stat-card warning">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            {% set maintenance = equipements|filter(e => e.etat|lower == 'maintenance')|length %}
                            <div class="stat-number text-warning">{{ maintenance }}</div>
                            <div class="stat-label">En Maintenance</div>
                        </div>
                        <i class="bi bi-tools text-warning" style="font-size: 2rem; opacity: 0.3;"></i>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="stat-card danger">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            {% set pannes = equipements|filter(e => e.etat|lower == 'en panne')|length %}
                            <div class="stat-number text-danger">{{ pannes }}</div>
                            <div class="stat-label">En Panne</div>
                        </div>
                        <i class="bi bi-exclamation-triangle text-danger" style="font-size: 2rem; opacity: 0.3;"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters Section -->
    <div class="filters-section">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h4 class="mb-0">
                <i class="bi bi-funnel me-2"></i>
                Filtres et Recherche
            </h4>
            <div class="view-toggle">
                <button type="button" class="active" id="tableView">
                    <i class="bi bi-table"></i>
                </button>
                <button type="button" id="gridView">
                    <i class="bi bi-grid-3x3-gap"></i>
                </button>
            </div>
        </div>

        {{ form_start(form, {'attr': {'id': 'filterForm'}}) }}
            <div class="row g-3">
                <div class="col-lg-3 col-md-6">
                    <label class="form-label fw-semibold">
                        <i class="bi bi-search me-1"></i>
                        Nom de l'équipement
                    </label>
                    {{ form_widget(form.nom, {
                        'attr': {
                            'class': 'form-control search-input',
                            'placeholder': 'Rechercher par nom...'
                        }
                    }) }}
                </div>
                <div class="col-lg-3 col-md-6">
                    <label class="form-label fw-semibold">
                        <i class="bi bi-tag me-1"></i>
                        Type d'équipement
                    </label>
                    {{ form_widget(form.type, {
                        'attr': {
                            'class': 'form-select search-input'
                        }
                    }) }}
                </div>
                <div class="col-lg-3 col-md-6">
                    <label class="form-label fw-semibold">
                        <i class="bi bi-activity me-1"></i>
                        État
                    </label>
                    {{ form_widget(form.etat, {
                        'attr': {
                            'class': 'form-select search-input'
                        }
                    }) }}
                </div>
                <div class="col-lg-3 col-md-6">
                    <label class="form-label fw-semibold">
                        <i class="bi bi-geo-alt me-1"></i>
                        Localisation
                    </label>
                    {{ form_widget(form.localisation, {
                        'attr': {
                            'class': 'form-select search-input'
                        }
                    }) }}
                </div>
            </div>
            
            <div class="d-flex gap-2 mt-3">
                <button type="submit" class="btn btn-primary-modern btn-modern">
                    <i class="bi bi-search me-2"></i>
                    Rechercher
                </button>
                <button type="button" class="btn btn-outline-secondary btn-modern" id="resetFilters">
                    <i class="bi bi-arrow-clockwise me-2"></i>
                    Réinitialiser
                </button>
                <button type="button" class="btn btn-outline-info btn-modern" id="exportBtn">
                    <i class="bi bi-download me-2"></i>
                    Exporter
                </button>
            </div>
        {{ form_end(form) }}

        <!-- Active Filters -->
        <div class="filter-tags" id="activeFilters"></div>
    </div>

    <!-- Equipment Table -->
    <div class="equipments-table" id="tableContainer">
        <div class="table-header">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="bi bi-list-ul me-2"></i>
                    Liste des Équipements
                </h5>
                <small>{{ equipements|length }} équipement(s) trouvé(s)</small>
            </div>
        </div>

        {% if equipements|length > 0 %}
            <div class="table-responsive">
                <table class="table table-hover mb-0" id="equipmentTable">
                    <thead>
                        <tr>
                            <th style="width: 60px;">
                                <input type="checkbox" class="form-check-input" id="selectAll">
                            </th>
                            <th>Code</th>
                            <th>Nom</th>
                            <th>Marque</th>
                            <th>Modèle</th>
                            <th>Catégorie</th>
                            <th>Date d'achat</th>
                            <th>Prix</th>
                            <th>État</th>
                            <th style="width: 120px;">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                    {% for equipement in equipements %}
                        <tr data-id="{{ equipement.id }}">
                            <td>
                                <input type="checkbox" class="form-check-input row-select" value="{{ equipement.id }}">
                            </td>
                            <td>
                                <span class="badge bg-light text-dark">{{ equipement.codeInventaire }}</span>
                            </td>
                            <td>
                                <div class="fw-semibold">{{ equipement.nom }}</div>
                                {% if equipement.numeroSerie %}
                                    <small class="text-muted">S/N: {{ equipement.numeroSerie }}</small>
                                {% endif %}
                            </td>
                            <td>{{ equipement.marque }}</td>
                            <td>{{ equipement.modele }}</td>
                            <td>
                                <span class="badge bg-primary">{{ equipement.categorie }}</span>
                            </td>
                            <td>
                                {% if equipement.dateAchat %}
                                    {{ equipement.dateAchat|date('d/m/Y') }}
                                    <br><small class="text-muted">
                                        {{ equipement.dateAchat|date_modify('now')|date('%a') }} jours
                                    </small>
                                {% else %}
                                    <span class="text-muted">Non définie</span>
                                {% endif %}
                            </td>
                            <td>
                                {% if equipement.prix %}
                                    <span class="fw-semibold">{{ equipement.prix|number_format(2, ',', ' ') }} €</span>
                                {% else %}
                                    <span class="text-muted">N/A</span>
                                {% endif %}
                            </td>
                            <td>
                                <span class="status-badge status-{{ equipement.etat|lower|replace({' ': '-'}) }}">
                                    {{ equipement.etat }}
                                </span>
                            </td>
                            <td>
                                <div class="action-buttons">
                                    <a href="{{ path('app_equipement_show', {'id': equipement.id}) }}" 
                                       class="btn-action btn-view" 
                                       title="Voir les détails">
                                        <i class="bi bi-eye"></i>
                                    </a>
                                    <a href="{{ path('app_equipement_edit', {'id': equipement.id}) }}" 
                                       class="btn-action btn-edit" 
                                       title="Modifier">
                                        <i class="bi bi-pencil"></i>
                                    </a>
                                    <button class="btn-action btn-delete" 
                                            onclick="confirmDelete({{ equipement.id }})" 
                                            title="Supprimer">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>
            </div>
        {% else %}
            <div class="empty-state">
                <i class="bi bi-inbox"></i>
                <h4>Aucun équipement trouvé</h4>
                <p>Aucun équipement ne correspond à vos critères de recherche.</p>
                <a href="{{ path('app_equipement_new') }}" class="btn btn-success-modern btn-modern mt-3">
                    <i class="bi bi-plus-circle me-2"></i>
                    Ajouter le premier équipement
                </a>
            </div>
        {% endif %}
    </div>

    <!-- Grid View -->
    <div class="grid-view d-none" id="gridContainer">
        {% for equipement in equipements %}
            <div class="equipment-card">
                <div class="equipment-header">
                    <div>
                        <div class="equipment-name">{{ equipement.nom }}</div>
                        <small class="text-muted">{{ equipement.codeInventaire }}</small>
                    </div>
                    <span class="status-badge status-{{ equipement.etat|lower|replace({' ': '-'}) }}">
                        {{ equipement.etat }}
                    </span>
                </div>
                
                <div class="equipment-details mb-3">
                    <div><strong>Marque:</strong> {{ equipement.marque }}</div>
                    <div><strong>Modèle:</strong> {{ equipement.modele }}</div>
                    <div><strong>Catégorie:</strong> {{ equipement.categorie }}</div>
                    <div><strong>Prix:</strong> {{ equipement.prix ? equipement.prix ~ ' FG' : 'N/A' }}</div>
                </div>
                
                <div class="d-flex justify-content-between align-items-center">
                    <small class="text-muted">
                        {% if equipement.dateAchat %}
                            Acheté le {{ equipement.dateAchat|date('d/m/Y') }}
                        {% else %}
                            Date d'achat inconnue
                        {% endif %}
                    </small>
                    <div class="action-buttons">
                        <a href="{{ path('app_equipement_show', {'id': equipement.id}) }}" class="btn-action btn-view">
                            <i class="bi bi-eye"></i>
                        </a>
                        <a href="{{ path('app_equipement_edit', {'id': equipement.id}) }}" class="btn-action btn-edit">
                            <i class="bi bi-pencil"></i>
                        </a>
                    </div>
                </div>
            </div>
        {% endfor %}
    </div>

    <!-- Pagination -->
    {% if equipements|length > 0 %}
        <nav aria-label="Equipment pagination">
            <ul class="pagination pagination-modern">
                <li class="page-item">
                    <a class="page-link" href="#" aria-label="Previous">
                        <i class="bi bi-chevron-left"></i>
                    </a>
                </li>
                <li class="page-item active"><a class="page-link" href="#">1</a></li>
                <li class="page-item"><a class="page-link" href="#">2</a></li>
                <li class="page-item"><a class="page-link" href="#">3</a></li>
                <li class="page-item">
                    <a class="page-link" href="#" aria-label="Next">
                        <i class="bi bi-chevron-right"></i>
                    </a>
                </li>
            </ul>
        </nav>
    {% endif %}
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        // View Toggle
        const tableViewBtn = document.getElementById('tableView');
        const gridViewBtn = document.getElementById('gridView');
        const tableContainer = document.getElementById('tableContainer');
        const gridContainer = document.getElementById('gridContainer');

        tableViewBtn.addEventListener('click', () => {
            tableViewBtn.classList.add('active');
            gridViewBtn.classList.remove('active');
            tableContainer.classList.remove('d-none');
            gridContainer.classList.add('d-none');
        });

        gridViewBtn.addEventListener('click', () => {
            gridViewBtn.classList.add('active');
            tableViewBtn.classList.remove('active');
            tableContainer.classList.add('d-none');
            gridContainer.classList.remove('d-none');
        });

        // Select All Functionality
        const selectAllCheckbox = document.getElementById('selectAll');
        const rowCheckboxes = document.querySelectorAll('.row-select');

        selectAllCheckbox?.addEventListener('change', function() {
            rowCheckboxes.forEach(checkbox => {
                checkbox.checked = this.checked;
            });
            updateBulkActions();
        });

        rowCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', updateBulkActions);
        });

        function updateBulkActions() {
            const selectedCount = document.querySelectorAll('.row-select:checked').length;
            // Here you could show/hide bulk action buttons
            console.log(`${selectedCount} items selected`);
        }

        // Loading Overlay
        function showLoading() {
            document.getElementById('loadingOverlay').classList.add('show');
        }

        function hideLoading() {
            document.getElementById('loadingOverlay').classList.remove('show');
        }

        // Form Submission with Loading
        document.getElementById('filterForm').addEventListener('submit', function() {
            showLoading();
        });

        // Reset Filters
        document.getElementById('resetFilters').addEventListener('click', function() {
            const form = document.getElementById('filterForm');
            form.reset();
            form.submit();
        });

        // Export Functionality
        document.getElementById('exportBtn').addEventListener('click', function() {
            // Simulate export
            showLoading();
            setTimeout(() => {
                hideLoading();
                alert('Export terminé !');
            }, 2000);
        });

        // Confirm Delete
        function confirmDelete(equipmentId) {
            if (confirm('Êtes-vous sûr de vouloir supprimer cet équipement ?')) {
                showLoading();
                // Here you would typically make an AJAX call to delete
                setTimeout(() => {
                    hideLoading();
                    alert('Équipement supprimé avec succès !');
                }, 1000);
            }
        }

        // Live Search (Optional)
        let searchTimeout;
        const searchInputs = document.querySelectorAll('.search-input');
        
        searchInputs.forEach(input => {
            input.addEventListener('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    performLiveSearch();
                }, 500); // Délai de 500ms pour éviter trop de requêtes
            });
        });

        function performLiveSearch() {
            const formData = new FormData(document.getElementById('filterForm'));
            
            // Afficher les filtres actifs
            updateActiveFilters(formData);
            
            // Simulation d'une recherche AJAX
            showLoading();
            setTimeout(() => {
                hideLoading();
                // Ici, vous feriez normalement une requête AJAX pour filtrer les résultats
                console.log('Recherche effectuée avec les critères:', Object.fromEntries(formData));
            }, 800);
        }

        // Mise à jour des filtres actifs
        function updateActiveFilters(formData) {
            const activeFiltersContainer = document.getElementById('activeFilters');
            activeFiltersContainer.innerHTML = '';
            
            const filterLabels = {
                'filter_form[nom]': 'Nom',
                'filter_form[type]': 'Type',
                'filter_form[etat]': 'État',
                'filter_form[localisation]': 'Localisation'
            };
            
            for (let [key, value] of formData.entries()) {
                if (value && value.trim() !== '' && filterLabels[key]) {
                    const filterTag = document.createElement('div');
                    filterTag.className = 'filter-tag';
                    filterTag.innerHTML = `
                        <span>${filterLabels[key]}: ${value}</span>
                        <span class="remove" onclick="removeFilter('${key}')">&times;</span>
                    `;
                    activeFiltersContainer.appendChild(filterTag);
                }
            }
        }

        // Supprimer un filtre spécifique
        function removeFilter(filterKey) {
            const input = document.querySelector(`[name="${filterKey}"]`);
            if (input) {
                if (input.type === 'select-one') {
                    input.selectedIndex = 0;
                } else {
                    input.value = '';
                }
                performLiveSearch();
            }
        }

        // Tri des colonnes
        function initTableSorting() {
            const headers = document.querySelectorAll('#equipmentTable th');
            
            headers.forEach((header, index) => {
                if (index === 0 || index === headers.length - 1) return; // Skip checkbox and actions columns
                
                header.style.cursor = 'pointer';
                header.innerHTML += ' <i class="bi bi-arrow-down-up ms-1"></i>';
                
                header.addEventListener('click', () => {
                    sortTable(index, header);
                });
            });
        }

        function sortTable(columnIndex, headerElement) {
            const table = document.getElementById('equipmentTable');
            const tbody = table.querySelector('tbody');
            const rows = Array.from(tbody.querySelectorAll('tr'));
            
            // Déterminer l'ordre de tri
            const isAscending = !headerElement.classList.contains('sort-asc');
            
            // Réinitialiser tous les indicateurs de tri
            document.querySelectorAll('#equipmentTable th').forEach(th => {
                th.classList.remove('sort-asc', 'sort-desc');
                const icon = th.querySelector('.bi');
                if (icon && (icon.classList.contains('bi-sort-up') || icon.classList.contains('bi-sort-down'))) {
                    icon.className = 'bi bi-arrow-down-up ms-1';
                }
            });
            
            // Appliquer le nouveau tri
            headerElement.classList.add(isAscending ? 'sort-asc' : 'sort-desc');
            const icon = headerElement.querySelector('.bi');
            if (icon) {
                icon.className = `bi ${isAscending ? 'bi-sort-up' : 'bi-sort-down'} ms-1`;
            }
            
            // Trier les lignes
            rows.sort((a, b) => {
                const cellA = a.cells[columnIndex].textContent.trim();
                const cellB = b.cells[columnIndex].textContent.trim();
                
                // Traitement spécial pour les nombres et dates
                if (columnIndex === 7) { // Prix
                    const priceA = parseFloat(cellA.replace(/[^\d,.-]/g, '').replace(',', '.')) || 0;
                    const priceB = parseFloat(cellB.replace(/[^\d,.-]/g, '').replace(',', '.')) || 0;
                    return isAscending ? priceA - priceB : priceB - priceA;
                } else if (columnIndex === 6) { // Date
                    const dateA = new Date(cellA.replace(/(\d{2})\/(\d{2})\/(\d{4})/, '$3-$2-$1'));
                    const dateB = new Date(cellB.replace(/(\d{2})\/(\d{2})\/(\d{4})/, '$3-$2-$1'));
                    return isAscending ? dateA - dateB : dateB - dateA;
                } else {
                    return isAscending ? 
                        cellA.localeCompare(cellB) : 
                        cellB.localeCompare(cellA);
                }
            });
            
            // Réorganiser les lignes dans le tableau
            rows.forEach(row => tbody.appendChild(row));
            
            // Animation de mise à jour
            tbody.style.opacity = '0.7';
            setTimeout(() => {
                tbody.style.opacity = '1';
            }, 200);
        }

        // Actions en lot
        function initBulkActions() {
            const bulkActionsContainer = document.createElement('div');
            bulkActionsContainer.id = 'bulkActions';
            bulkActionsContainer.className = 'alert alert-info d-none mt-3';
            bulkActionsContainer.innerHTML = `
                <div class="d-flex justify-content-between align-items-center">
                    <span id="selectedCount">0 équipement(s) sélectionné(s)</span>
                    <div>
                        <button class="btn btn-sm btn-warning me-2" onclick="bulkChangeStatus()">
                            <i class="bi bi-pencil me-1"></i>
                            Changer l'état
                        </button>
                        <button class="btn btn-sm btn-danger" onclick="bulkDelete()">
                            <i class="bi bi-trash me-1"></i>
                            Supprimer
                        </button>
                    </div>
                </div>
            `;
            
            const filtersSection = document.querySelector('.filters-section');
            filtersSection.appendChild(bulkActionsContainer);
            
            // Mettre à jour la fonction updateBulkActions
            window.updateBulkActions = function() {
                const selectedCount = document.querySelectorAll('.row-select:checked').length;
                const bulkActions = document.getElementById('bulkActions');
                const selectedCountSpan = document.getElementById('selectedCount');
                
                if (selectedCount > 0) {
                    bulkActions.classList.remove('d-none');
                    selectedCountSpan.textContent = `${selectedCount} équipement(s) sélectionné(s)`;
                } else {
                    bulkActions.classList.add('d-none');
                }
            };
        }

        // Actions en lot - Changer l'état
        function bulkChangeStatus() {
            const selectedIds = Array.from(document.querySelectorAll('.row-select:checked'))
                .map(cb => cb.value);
            
            if (selectedIds.length === 0) return;
            
            const newStatus = prompt('Nouvel état (Fonctionnel, En panne, Maintenance, Obsolète):');
            if (newStatus && ['Fonctionnel', 'En panne', 'Maintenance', 'Obsolète'].includes(newStatus)) {
                showLoading();
                setTimeout(() => {
                    hideLoading();
                    alert(`État changé pour ${selectedIds.length} équipement(s)`);
                    // Ici, vous feriez la requête AJAX pour mettre à jour les équipements
                    location.reload(); // Recharger la page pour voir les changements
                }, 1000);
            }
        }

        // Actions en lot - Supprimer
        function bulkDelete() {
            const selectedIds = Array.from(document.querySelectorAll('.row-select:checked'))
                .map(cb => cb.value);
            
            if (selectedIds.length === 0) return;
            
            if (confirm(`Êtes-vous sûr de vouloir supprimer ${selectedIds.length} équipement(s) ?`)) {
                showLoading();
                setTimeout(() => {
                    hideLoading();
                    alert(`${selectedIds.length} équipement(s) supprimé(s)`);
                    // Ici, vous feriez la requête AJAX pour supprimer les équipements
                    location.reload();
                }, 1500);
            }
        }

        // Raccourcis clavier
        function initKeyboardShortcuts() {
            document.addEventListener('keydown', function(e) {
                // Ctrl + N : Nouvel équipement
                if (e.ctrlKey && e.key === 'n') {
                    e.preventDefault();
                    window.location.href = document.querySelector('a[href*="equipement_new"]').href;
                }
                
                // Ctrl + F : Focus sur la recherche
                if (e.ctrlKey && e.key === 'f') {
                    e.preventDefault();
                    const searchInput = document.querySelector('input[placeholder*="Rechercher"]');
                    if (searchInput) {
                        searchInput.focus();
                        searchInput.select();
                    }
                }
                
                // Échap : Réinitialiser les filtres
                if (e.key === 'Escape') {
                    document.getElementById('resetFilters').click();
                }
            });
        }

        // Sauvegarde locale des préférences
        function saveUserPreferences() {
            const preferences = {
                viewMode: tableContainer.classList.contains('d-none') ? 'grid' : 'table',
                filters: Object.fromEntries(new FormData(document.getElementById('filterForm')))
            };
            
            localStorage.setItem('equipmentPreferences', JSON.stringify(preferences));
        }

        function loadUserPreferences() {
            const preferences = localStorage.getItem('equipmentPreferences');
            if (preferences) {
                const prefs = JSON.parse(preferences);
                
                // Restaurer le mode d'affichage
                if (prefs.viewMode === 'grid') {
                    gridViewBtn.click();
                }
                
                // Restaurer les filtres (optionnel)
                // for (let [key, value] of Object.entries(prefs.filters)) {
                //     const input = document.querySelector(`[name="${key}"]`);
                //     if (input && value) {
                //         input.value = value;
                //     }
                // }
            }
        }

        // Auto-refresh (optionnel)
        function initAutoRefresh() {
            const refreshInterval = 300000; // 5 minutes
            
            setInterval(() => {
                if (document.hidden) return; // Ne pas rafraîchir si l'onglet n'est pas visible
                
                const formData = new FormData(document.getElementById('filterForm'));
                
                // Vérifier s'il y a des changements (simulation)
                fetch(window.location.href, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.hasChanges) {
                        const toast = document.createElement('div');
                        toast.className = 'toast-notification';
                        toast.innerHTML = `
                            <div class="alert alert-info alert-dismissible">
                                <i class="bi bi-info-circle me-2"></i>
                                Des changements ont été détectés. 
                                <button type="button" class="btn btn-sm btn-outline-primary ms-2" onclick="location.reload()">
                                    Actualiser
                                </button>
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            </div>
                        `;
                        document.body.appendChild(toast);
                        
                        setTimeout(() => {
                            toast.remove();
                        }, 10000);
                    }
                })
                .catch(error => {
                    console.log('Auto-refresh failed:', error);
                });
            }, refreshInterval);
        }

        // Initialisation au chargement de la page
        document.addEventListener('DOMContentLoaded', function() {
            initTableSorting();
            initBulkActions();
            initKeyboardShortcuts();
            loadUserPreferences();
            // initAutoRefresh(); // Décommentez si vous voulez l'auto-refresh
            
            // Sauvegarder les préférences lors des changements
            tableViewBtn.addEventListener('click', saveUserPreferences);
            gridViewBtn.addEventListener('click', saveUserPreferences);
            
            // Animation d'entrée pour les cartes
            const cards = document.querySelectorAll('.stat-card, .equipment-card');
            cards.forEach((card, index) => {
                card.style.opacity = '0';
                card.style.transform = 'translateY(20px)';
                
                setTimeout(() => {
                    card.style.transition = 'all 0.5s ease';
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                }, index * 100);
            });
            
            // Masquer le loading au chargement complet
            hideLoading();
            
            console.log('🚀 Système de gestion des équipements initialisé avec succès!');
        });

        // Gestion des erreurs globales
        window.addEventListener('error', function(e) {
            console.error('Erreur JavaScript:', e.error);
            hideLoading();
        });

        // Performance monitoring (optionnel)
        if ('performance' in window) {
            window.addEventListener('load', function() {
                const loadTime = performance.now();
                console.log(`⚡ Page chargée en ${Math.round(loadTime)}ms`);
                
                if (loadTime > 3000) {
                    console.warn('⚠️ Temps de chargement élevé détecté');
                }
            });
        }
    </script>
{% endblock %}